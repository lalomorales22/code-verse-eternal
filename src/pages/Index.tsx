
import React, { useState, useCallback, useRef } from 'react';
import InfiniteCanvas from '@/components/InfiniteCanvas';
import DraggableAIInterface from '@/components/DraggableAIInterface';
import { Tool } from '@/services/toolSystem';

const Index = () => {
  const [generatedObjects, setGeneratedObjects] = useState<any[]>([]);
  const [uiComponents, setUIComponents] = useState<string[]>([]);
  const [createdTools, setCreatedTools] = useState<Tool[]>([]);
  const canvasRef = useRef<any>(null);

  const handleObjectGenerated = useCallback((code: string, metadata: any) => {
    console.log('Object generated by AI:', { code, metadata });
    setGeneratedObjects(prev => [...prev, { code, metadata, id: Date.now() }]);
    
    // If we have a canvas reference, try to add the object directly
    if (canvasRef.current) {
      canvasRef.current.addAIGeneratedObject(code, metadata);
    }
  }, []);

  const handleCodeModified = useCallback((code: string) => {
    console.log('Code modified by AI:', code);
  }, []);

  const handleUIUpdated = useCallback((code: string) => {
    console.log('UI updated by AI:', code);
    setUIComponents(prev => [...prev, code]);
  }, []);

  const handleToolCreated = useCallback((tool: Tool) => {
    console.log('Tool created:', tool);
    setCreatedTools(prev => [...prev, tool]);
  }, []);

  // Create scene context for tools
  const sceneContext = {
    scene: canvasRef.current?.getScene?.(),
    objects: generatedObjects,
    addObject: (object: any) => {
      const newObj = { ...object, id: Date.now() };
      setGeneratedObjects(prev => [...prev, newObj]);
      if (canvasRef.current) {
        canvasRef.current.addObject(newObj);
      }
    },
    updateObject: (id: string, updates: any) => {
      setGeneratedObjects(prev => 
        prev.map(obj => obj.id === id ? { ...obj, ...updates } : obj)
      );
    },
    deleteObject: (id: string) => {
      setGeneratedObjects(prev => prev.filter(obj => obj.id !== id));
    }
  };

  return (
    <div className="relative w-full h-screen overflow-hidden">
      {/* Main 3D Canvas */}
      <InfiniteCanvas ref={canvasRef} />
      
      {/* Draggable AI Interface */}
      <DraggableAIInterface
        onObjectGenerated={handleObjectGenerated}
        onCodeModified={handleCodeModified}
        onUIUpdated={handleUIUpdated}
        onToolCreated={handleToolCreated}
        sceneContext={sceneContext}
      />

      {/* Dynamic UI Components rendered by AI */}
      {uiComponents.length > 0 && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50">
          <div className="bg-black/80 backdrop-blur-sm border border-purple-500/30 rounded-lg p-4">
            <h3 className="text-purple-400 text-sm font-semibold mb-2">AI Generated UI</h3>
            <div className="text-xs text-gray-400">
              {uiComponents.length} component(s) generated
            </div>
          </div>
        </div>
      )}

      {/* Tools Status */}
      {createdTools.length > 0 && (
        <div className="fixed top-20 right-4 z-50">
          <div className="bg-black/80 backdrop-blur-sm border border-orange-500/30 rounded-lg p-3">
            <h3 className="text-orange-400 text-sm font-semibold mb-1">Active Tools</h3>
            <div className="text-xs text-gray-400">
              {createdTools.length} tool(s) available
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Debug Info */}
      <div className="fixed bottom-20 left-4 z-50 text-xs text-gray-500 space-y-1">
        <div>Generated Objects: {generatedObjects.length}</div>
        <div>UI Components: {uiComponents.length}</div>
        <div>Custom Tools: {createdTools.length}</div>
        <div className="text-cyan-400">AI Canvas v2.0 - Unlimited Creation</div>
      </div>

      {/* Instructions */}
      <div className="fixed bottom-4 right-4 z-50 text-xs text-gray-400 max-w-xs">
        <div className="bg-black/60 backdrop-blur-sm border border-gray-700 rounded-lg p-3">
          <p className="mb-2 text-cyan-400 font-semibold">Grok Powers:</p>
          <ul className="space-y-1">
            <li>• Drag the control panel anywhere</li>
            <li>• Create unlimited 3D objects</li>
            <li>• Generate custom tools on demand</li>
            <li>• Creative mode for impossible things</li>
            <li>• Self-improving AI system</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default Index;
