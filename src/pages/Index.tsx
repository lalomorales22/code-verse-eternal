
import React, { useState, useCallback, useRef } from 'react';
import InfiniteCanvas from '@/components/InfiniteCanvas';
import DraggableAIInterface from '@/components/DraggableAIInterface';
import AIGeneratedUI from '@/components/AIGeneratedUI';
import ToolsPanel from '@/components/ToolsPanel';
import { Tool } from '@/services/toolSystem';
import toolSystem from '@/services/toolSystem';
import aiService from '@/services/aiService';
import { toast } from 'sonner';

const Index = () => {
  const [generatedObjects, setGeneratedObjects] = useState<any[]>([]);
  const [uiComponents, setUIComponents] = useState<string[]>([]);
  const [createdTools, setCreatedTools] = useState<Tool[]>([]);
  const canvasRef = useRef<any>(null);

  const handleObjectGenerated = useCallback((code: string, metadata: any) => {
    console.log('Object generated by AI:', { code, metadata });
    setGeneratedObjects(prev => [...prev, { code, metadata, id: Date.now() }]);
    
    // If we have a canvas reference, try to add the object directly
    if (canvasRef.current) {
      canvasRef.current.addAIGeneratedObject(code, metadata);
    }
  }, []);

  const handleQuickCreate = useCallback(async (prompt: string) => {
    try {
      const response = await aiService.generateObject(prompt);
      if (response.success && response.code) {
        handleObjectGenerated(response.code, response.metadata);
        toast.success('Object created successfully!');
      } else {
        toast.error('Failed to create object');
      }
    } catch (error) {
      toast.error('Error creating object');
    }
  }, [handleObjectGenerated]);

  const handleCodeModified = useCallback((code: string) => {
    console.log('Code modified by AI:', code);
    // This could update the canvas or app behavior
    toast.success('System code updated!');
  }, []);

  const handleUIUpdated = useCallback((code: string) => {
    console.log('UI updated by AI:', code);
    setUIComponents(prev => [...prev, code]);
    toast.success('UI component generated!');
  }, []);

  const handleToolCreated = useCallback((tool: Tool) => {
    console.log('Tool created:', tool);
    setCreatedTools(prev => [...prev, tool]);
    toast.success(`Tool "${tool.name}" created!`);
  }, []);

  const handleExecuteTool = useCallback(async (tool: Tool) => {
    try {
      await toolSystem.executeTool(tool.id, sceneContext);
      toast.success(`Tool "${tool.name}" executed!`);
    } catch (error) {
      toast.error(`Tool execution failed: ${error.message}`);
    }
  }, []);

  const handleDeleteTool = useCallback((toolId: string) => {
    const success = toolSystem.deleteTool(toolId);
    if (success) {
      setCreatedTools(prev => prev.filter(tool => tool.id !== toolId));
      toast.success('Tool deleted');
    }
  }, []);

  const handleRemoveUIComponent = useCallback((index: number) => {
    setUIComponents(prev => prev.filter((_, i) => i !== index));
  }, []);

  // Create scene context for tools
  const sceneContext = {
    scene: canvasRef.current?.getScene?.(),
    objects: generatedObjects,
    addObject: (object: any) => {
      const newObj = { ...object, id: Date.now() };
      setGeneratedObjects(prev => [...prev, newObj]);
      if (canvasRef.current) {
        canvasRef.current.addObject(newObj);
      }
    },
    updateObject: (id: string, updates: any) => {
      setGeneratedObjects(prev => 
        prev.map(obj => obj.id === id ? { ...obj, ...updates } : obj)
      );
    },
    deleteObject: (id: string) => {
      setGeneratedObjects(prev => prev.filter(obj => obj.id !== id));
    }
  };

  return (
    <div className="relative w-full h-screen overflow-hidden">
      {/* Main 3D Canvas */}
      <InfiniteCanvas ref={canvasRef} onQuickCreate={handleQuickCreate} />
      
      {/* Draggable AI Interface */}
      <DraggableAIInterface
        onObjectGenerated={handleObjectGenerated}
        onCodeModified={handleCodeModified}
        onUIUpdated={handleUIUpdated}
        onToolCreated={handleToolCreated}
        sceneContext={sceneContext}
      />

      {/* AI Generated UI Components */}
      <AIGeneratedUI 
        components={uiComponents}
        onRemove={handleRemoveUIComponent}
      />

      {/* Tools Panel */}
      <ToolsPanel
        tools={createdTools}
        onExecuteTool={handleExecuteTool}
        onDeleteTool={handleDeleteTool}
      />

      {/* Enhanced Debug Info */}
      <div className="fixed bottom-20 left-4 z-50 text-xs text-gray-500 space-y-1">
        <div>Generated Objects: {generatedObjects.length}</div>
        <div>UI Components: {uiComponents.length}</div>
        <div>Custom Tools: {createdTools.length}</div>
        <div className="text-cyan-400">AI Canvas v2.0 - Unlimited Creation</div>
      </div>

      {/* Instructions */}
      <div className="fixed bottom-4 right-4 z-50 text-xs text-gray-400 max-w-xs">
        <div className="bg-black/60 backdrop-blur-sm border border-gray-700 rounded-lg p-3">
          <p className="mb-2 text-cyan-400 font-semibold">Grok Powers:</p>
          <ul className="space-y-1">
            <li>• Drag the control panel anywhere</li>
            <li>• Create unlimited 3D objects</li>
            <li>• Generate custom tools on demand</li>
            <li>• Creative mode for impossible things</li>
            <li>• Self-improving AI system</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default Index;
